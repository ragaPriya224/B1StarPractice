Request,
Response
client-server relationship


client -> request for google.com
server -> responds with google.com 

biryani -> static request(requesting for something that is already available )
fresh juice -> dynamic request 


http, https
HTTPs -> more secure

http status code
1Xx   -> informational
2xx   ->success
3xx   -> redirection
4xx   -> client error 
5xx   -> server error 

dev, testing, deployment 
environments:

local, dev ,qa, stage , prod  

architecture -> monolithic, microservices 



Think  as a one big chunk of code  -> monolithic architecture
breaking them up into smaller parts -> microservices architecture 

loosecoupling  -> desktop 
tight coupling  -> laptop 


Netflix is a pioneer in microservices 


here are the following components of microservices:
Spring Cloud Config Server   -> for external configuration 
Netflix Eureka Naming Server -> discovery server
Hystrix Server -> fault tolerance 
Netflix ZuulAPI Gateway Server-> gateway server, from where all client request pass through 
Netflix Ribbon -> provides client side balancing algo
Zipkin Distributed Tracing Server -> send, receive, visualize traces 
----------------------------------------------------------------------------------------

